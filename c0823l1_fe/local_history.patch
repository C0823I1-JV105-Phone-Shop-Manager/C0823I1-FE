Index: src/ProductComponent/service/ProductService.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ProductComponent/service/ProductService.js b/src/ProductComponent/service/ProductService.js
--- a/src/ProductComponent/service/ProductService.js	
+++ b/src/ProductComponent/service/ProductService.js	(date 1726074500241)
@@ -1,60 +1,6 @@
 
 import axios from "axios";
 
-export const getAllPhone = async (name, page = 1, size = 8) => {
-    try {
-        let query = "http://localhost:1010/api/products?"
-        if (name) {
-            query += `name=${name}&`;
-        }
-        query += `page=${page}&size=${size}`;
-        // Xóa ký tự "&" cuối cùng nếu có
-        query = query.endsWith('&') ? query.slice(0, -1) : query;
-
-        // Kiểm tra nếu query chỉ có phần base URL mà không có query parameters
-        if (query.endsWith('?')) {
-            query = query.slice(0, -1);
-        }
-        let result = await axios.get(query);
-        return result.data
-    } catch (e) {
-        console.log(e);
-    }
-}
-export const filterPhones = async (price, brand, camera, storage, cpu, page = 1, size = 8) => {
-    try {
-        let query = "http://localhost:1010/api/filters?"
-        if (price) {
-            query += `price=${price}&`;
-        }
-        if (brand) {
-            query += `brand=${brand.id}&`;
-        }
-        if (camera) {
-            query += `camera=${camera}&`;
-        }
-        if (storage) {
-            query += `storage=${storage}&`;
-        }
-        if (cpu) {
-            query += `cpu=${cpu}&`;
-        }
-        query += `page=${page}&size=${size}`;
-
-        // Xóa ký tự "&" cuối cùng nếu có
-        query = query.endsWith('&') ? query.slice(0, -1) : query;
-
-        // Kiểm tra nếu query chỉ có phần base URL mà không có query parameters
-        if (query.endsWith('?')) {
-            query = query.slice(0, -1);
-        }
-
-        let result = await axios.get(query);
-        return result.data;
-    } catch (e) {
-        console.log(e);
-    }
-}
 export const filterPhonesByBrand = async (brand, page = 1, size = 8) => {
     try {
         let query = "http://localhost:1010/api/filters?"
@@ -90,6 +36,29 @@
 
 }
 
+
+//
+// // Hàm list nhà cung cấp với các tham số lọc bao gồm địa chỉ và phân trang
+// export const list = async (address = "", searchTerm = "", page = 0, size = 5, sortField = 'phone', sortOrder = 'desc') => {
+//     try {
+//         const response = await axios.get("http://localhost:1010/api/products/search", {
+//             params: {
+//                 address: address,
+//                 search: searchTerm,
+//                 page: page,
+//                 size: size,
+//                 sort: `${sortField},${sortOrder}`
+//             }
+//         });
+//         return response.data; // Trả về dữ liệu phân trang từ API
+//     } catch (err) {
+//         console.log(err);
+//     }
+// };
+
+
+
+
 // Hàm xóa 1 sản phẩm theo ID
 export const deleteProduct = async (productId) => {
     try {
Index: src/ProductComponent/ProductDashboard.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ProductComponent/ProductDashboard.jsx b/src/ProductComponent/ProductDashboard.jsx
--- a/src/ProductComponent/ProductDashboard.jsx	
+++ b/src/ProductComponent/ProductDashboard.jsx	(date 1726076155955)
@@ -16,6 +16,7 @@
 import React, {useState, useEffect, Component} from 'react';
 import * as PropTypes from "prop-types";
 import {Form} from "formik";
+import * as supplierService from "../SupplierComponent/service/SupplierService";
 
 
 
@@ -43,14 +44,12 @@
 
 
 
-    useEffect(() => {
-        // Lấy sản phẩm dựa trên trang hiện tại
-        ListProduct(); // Call the function to fetch product data
-        document.title = `Danh sách`;
-        window.scrollTo(0, 0);
-        fetchProducts(currentPage);
-    },[currentPage]);
-    const ListProduct = async () => {
+
+      useEffect(() => {
+          ListProduct();
+      }, [page, selectedAddress, searchTerm]);
+
+      const ListProduct = async () => {
         try {
             const data = await productService.listProduct();
             setProducts(data.content);
@@ -181,164 +180,165 @@
     };
 
 
-    return (
-        <div id="page-top" className="d-flex flex-column min-vh-100">
-            <div id="wrapper" className="flex-grow-1">
-                <SideNav />
-                { <Container className="my-5">
-                    <h2 className="text-center mb-4">Thông tin hàng hóa</h2>
-                    <div className="d-flex flex-wrap mb-4">
-                        <Button
-                            variant="primary"
-                            className="mr-3 mb-2"
-                            onClick={() => setShowAddModal(true)}
-                        >
-                            Thêm mới hàng hóa
-                        </Button>
-                        <Form inline className="ml-auto mb-2" onSubmit={(e) => e.preventDefault()}>
-                            <Form.Label className="mr-2">Tìm kiếm theo</Form.Label>
-                            <Form.Control
-                                as="select"
-                                className="mr-2"
-                                value={searchCategory}
-                                onChange={(e) => setSearchCategory(e.target.value)}
-                            >
-                                <option value="name">Tên hàng hóa</option>
-                                <option value="cpu">CPU</option>
-                                <option value="storage">Lưu trữ</option>
-                                <option value="price">Giá</option>
-                                {/* Add more options if needed */}
-                            </Form.Control>
-                            <Form.Control
-                                type="text"
-                                placeholder="Tìm kiếm..."
-                                className="mr-2"
-                                value={searchTerm}
-                                onChange={(e) => setSearchTerm(e.target.value)}
-                            />
-                            <Button variant="primary" onClick={handleSearch}>
-                                Tìm kiếm
-                            </Button>
-                            {/*<Button variant="secondary" onClick={handleReset} className="ml-2">*/}
-                            {/*    Reset*/}
-                            {/*</Button>*/}
-
-                        </Form>
-                    </div>
-                    <Table bordered hover responsive>
-                        <thead className="thead-light">
-                        <tr>
-                            <th>#</th>
-                            <th>Tên</th>
-                            <th>Giá</th>
-                            <th>CPU</th>
-                            <th>Lưu trữ</th>
-                            <th>Số lượng</th>
-                            <th>Hành động</th>
-                        </tr>
-                        </thead>
-                        <tbody>
-                        {currentProducts.length > 0 ? (
-                            currentProducts.map((product, index) => (
-                                <tr key={product.id}>
-                                    <td>{indexOfFirstProduct + index + 1}</td>
-                                    <td>{product.name}</td>
-                                    <td>{product.price}</td>
-                                    <td>{product.cpu}</td>
-                                    <td>{product.storage}</td>
-                                    <td>{product.quantity}</td>
-                                    <td>
-                                        <div className="d-flex">
-                                            <i
-                                                className="fas fa-book text-info mr-3"
-                                                style={{ cursor: 'pointer' }}
-                                                onClick={() => viewProductDetails(product)}
-                                                title="Xem chi tiết"
-                                            ></i>
-                                            <i
-                                                className="fas fa-edit text-warning mr-3"
-                                                style={{ cursor: 'pointer' }}
-                                                title="Chỉnh sửa"
-                                                // Implement edit functionality if needed
-                                            ></i>
-                                            <i
-                                                className="fas fa-trash-alt text-danger"
-                                                style={{ cursor: 'pointer' }}
-                                                onClick={() => confirmDelete(product)}
-                                                title="Xóa"
-                                            ></i>
-                                        </div>
-                                    </td>
-                                </tr>
-                            ))
-                        ) : (
-                            <tr>
-                                <td colSpan="7" className="text-center">
-                                    Không có dữ liệu.
-                                </td>
-                            </tr>
-                        )}
-                        </tbody>
-                    </Table>
-                    {/* Pagination */}
-                    {totalPages > 1 && (
-                        <Pagination className="justify-content-center">
-                            <Pagination.Prev
-                                onClick={() => paginate(currentPage - 1)}
-                                disabled={currentPage === 1}
-                            >
-                                Trang trước
-                            </Pagination.Prev>
-                            {[...Array(totalPages)].map((_, idx) => (
-                                <Pagination.Item
-                                    key={idx + 1}
-                                    active={currentPage === idx + 1}
-                                    onClick={() => paginate(idx + 1)}
-                                >
-                                    {idx + 1}
-                                </Pagination.Item>
-                            ))}
-                            <Pagination.Next
-                                onClick={() => paginate(currentPage + 1)}
-                                disabled={currentPage === totalPages}
-                            >
-                                Trang tiếp
-                            </Pagination.Next>
-                        </Pagination>
-                    )}
-
-                    {/* Toast Container */}
-                    <ToastContainer position="top-right" autoClose={3000} />
-
-                    {/* Product Details Modal */}
-                    {selectedProduct && (
-                        <getProductById
-                            show={showDetailsModal}
-                            handleClose={() => setShowDetailsModal(false)}
-                            product={selectedProduct}
-                        />
-                    )}
-
-                    {/* Delete Confirmation Modal */}
-                    {productToDelete && (
-                        <deleteProduct
-                            show={showDeleteModal}
-                            handleClose={() => setShowDeleteModal(false)}
-                            handleDelete={handleDelete}
-                            productName={productToDelete.name}
-                        />
-                    )}
-
-                    {/* Add Product Modal */}
-                    {/*<AddProductModal*/}
-                        show={showAddModal}
-                        handleClose={() => setShowAddModal(false)}
-                        handleAdd={handleAddProduct}
-                    />
-                </Container>}
-            </div>
-            <Footer />
-        </div>
+    return(
+        <h1> abc</h1>
+//         <div id="page-top" className="d-flex flex-column min-vh-100">
+//             <div id="wrapper" className="flex-grow-1">
+//                 <SideNav />
+//                 { <Container className="my-5">
+//                     <h2 className="text-center mb-4">Thông tin hàng hóa</h2>
+//                     <div className="d-flex flex-wrap mb-4">
+//                         <Button
+//                             variant="primary"
+//                             className="mr-3 mb-2"
+//                             onClick={() => setShowAddModal(true)}
+//                         >
+//                             Thêm mới hàng hóa
+//                         </Button>
+//                         {/*<Form inline className="ml-auto mb-2" onSubmit={(e) => e.preventDefault()}>*/}
+//                         {/*    <Form.Label className="mr-2">Tìm kiếm theo</Form.Label>*/}
+//                         {/*    <Form.Control*/}
+//                         {/*        as="select"*/}
+//                         {/*        className="mr-2"*/}
+//                         {/*        value={searchCategory}*/}
+//                         {/*        onChange={(e) => setSearchCategory(e.target.value)}*/}
+//                         {/*    >*/}
+//                         {/*        <option value="name">Tên hàng hóa</option>*/}
+//                         {/*        <option value="cpu">CPU</option>*/}
+//                         {/*        <option value="storage">Lưu trữ</option>*/}
+//                         {/*        <option value="price">Giá</option>*/}
+//                         {/*        /!* Add more options if needed *!/*/}
+//                         {/*    </Form.Control>*/}
+//                         {/*    <Form.Control*/}
+//                         {/*        type="text"*/}
+//                         {/*        placeholder="Tìm kiếm..."*/}
+//                         {/*        className="mr-2"*/}
+//                         {/*        value={searchTerm}*/}
+//                         {/*        onChange={(e) => setSearchTerm(e.target.value)}*/}
+//                         {/*    />*/}
+//                         {/*    <Button variant="primary" onClick={handleSearch}>*/}
+//                         {/*        Tìm kiếm*/}
+//                         {/*    </Button>*/}
+//                         {/*    /!*<Button variant="secondary" onClick={handleReset} className="ml-2">*!/*/}
+//                         {/*    /!*    Reset*!/*/}
+//                         {/*    /!*</Button>*!/*/}
+//
+//                         {/*</Form>*/}
+//                     </div>
+//                     <Table bordered hover responsive>
+//                         <thead className="thead-light">
+//                         <tr>
+//                             <th>#</th>
+//                             <th>Tên</th>
+//                             <th>Giá</th>
+//                             <th>CPU</th>
+//                             <th>Lưu trữ</th>
+//                             <th>Số lượng</th>
+//                             <th>Hành động</th>
+//                         </tr>
+//                         </thead>
+//                         <tbody>
+//                         {currentProducts.length > 0 ? (
+//                             currentProducts.map((product, index) => (
+//                                 <tr key={product.id}>
+//                                     <td>{indexOfFirstProduct + index + 1}</td>
+//                                     <td>{product.name}</td>
+//                                     <td>{product.price}</td>
+//                                     <td>{product.cpu}</td>
+//                                     <td>{product.storage}</td>
+//                                     <td>{product.quantity}</td>
+//                                     <td>
+//                                         <div className="d-flex">
+//                                             <i
+//                                                 className="fas fa-book text-info mr-3"
+//                                                 style={{ cursor: 'pointer' }}
+//                                                 onClick={() => viewProductDetails(product)}
+//                                                 title="Xem chi tiết"
+//                                             ></i>
+//                                             <i
+//                                                 className="fas fa-edit text-warning mr-3"
+//                                                 style={{ cursor: 'pointer' }}
+//                                                 title="Chỉnh sửa"
+//                                                 // Implement edit functionality if needed
+//                                             ></i>
+//                                             <i
+//                                                 className="fas fa-trash-alt text-danger"
+//                                                 style={{ cursor: 'pointer' }}
+//                                                 onClick={() => confirmDelete(product)}
+//                                                 title="Xóa"
+//                                             ></i>
+//                                         </div>
+//                                     </td>
+//                                 </tr>
+//                             ))
+//                         ) : (
+//                             <tr>
+//                                 <td colSpan="7" className="text-center">
+//                                     Không có dữ liệu.
+//                                 </td>
+//                             </tr>
+//                         )}
+//                         </tbody>
+//                     </Table>
+//                     {/* Pagination */}
+//                     {totalPages > 1 && (
+//                         <Pagination className="justify-content-center">
+//                             <Pagination.Prev
+//                                 onClick={() => paginate(currentPage - 1)}
+//                                 disabled={currentPage === 1}
+//                             >
+//                                 Trang trước
+//                             </Pagination.Prev>
+//                             {[...Array(totalPages)].map((_, idx) => (
+//                                 <Pagination.Item
+//                                     key={idx + 1}
+//                                     active={currentPage === idx + 1}
+//                                     onClick={() => paginate(idx + 1)}
+//                                 >
+//                                     {idx + 1}
+//                                 </Pagination.Item>
+//                             ))}
+//                             <Pagination.Next
+//                                 onClick={() => paginate(currentPage + 1)}
+//                                 disabled={currentPage === totalPages}
+//                             >
+//                                 Trang tiếp
+//                             </Pagination.Next>
+//                         </Pagination>
+//                     )}
+//
+//                     {/* Toast Container */}
+//                     <ToastContainer position="top-right" autoClose={3000} />
+//
+//                     {/* Product Details Modal */}
+//                     {selectedProduct && (
+//                         <getProductById
+//                             show={showDetailsModal}
+//                             handleClose={() => setShowDetailsModal(false)}
+//                             product={selectedProduct}
+//                         />
+//                     )}
+//
+//                     {/* Delete Confirmation Modal */}
+//                     {productToDelete && (
+//                         <deleteProduct
+//                             show={showDeleteModal}
+//                             handleClose={() => setShowDeleteModal(false)}
+//                             handleDelete={handleDelete}
+//                             productName={productToDelete.name}
+//                         />
+//                     )}
+//
+//                     {/* Add Product Modal */}
+//                     {/*<AddProductModal*/}
+//                         show={showAddModal}
+//                         handleClose={() => setShowAddModal(false)}
+//                         handleAdd={handleAddProduct}
+//                     />
+//                 </Container>}
+//             </div>
+//             <Footer />
+//         </div>
     );
 }
 export  default ProductDashboard;
\ No newline at end of file
Index: src/ProductComponent/ProductDashboard3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ProductComponent/ProductDashboard3.js b/src/ProductComponent/ProductDashboard3.js
new file mode 100644
--- /dev/null	(date 1726076257262)
+++ b/src/ProductComponent/ProductDashboard3.js	(date 1726076257262)
@@ -0,0 +1,326 @@
+import Swal from "sweetalert2";
+import  {SideNav} from "../components/common/SideNav";
+import "bootstrap-icons/font/bootstrap-icons.css"; // Correctly import Bootstrap Icons CSS
+import "../components/assets/bootstrap/css/bootstrap.min.css";
+import Footer from "../components/common/Footer";
+import "../components/assets/css/animate.min.css";
+import "../components/assets/fonts/fontawesome-all.min.css";
+import {Modal, Button, Container, Table} from 'react-bootstrap';
+import * as productService from "./service/ProductService";
+import {ToastContainer} from "react-toastify";
+import { Pagination } from 'react-bootstrap';
+import {getProductById} from './service/ProductService'; // Adjust path as necessary
+import {deleteProduct} from './service/ProductService';
+import React, {useState, useEffect, Component} from 'react';
+
+
+function ProductDashboard3(){
+
+    // Khởi tạo currentPage với giá trị mặc định, ví dụ là 1
+    const [currentPage, setCurrentPage] = useState(1);
+    const [selectedAddress, setSelectedAddress] = useState("");
+    const [selectedUids, setSelectedUids] = useState([]);
+    const [searchTerm, setSearchTerm] = useState("");
+    const [page, setPage] = useState(0); // Thêm state cho trang hiện tại
+    const [totalPages, setTotalPages] = useState(0); // Thêm state cho tổng số trang
+    const productsPerPage = 10; // Giả sử mỗi trang hiển thị 10 sản phẩm
+    const indexOfLastProduct = currentPage * productsPerPage;
+    const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
+
+
+    const [products, setProducts] = useState([]); // Example product state
+    const [showAddModal, setShowAddModal] = useState(false);
+    const [searchCategory, setSearchCategory] = useState('');
+    const [currentProducts, setCurrentProducts] = useState([]);
+    const [selectedProduct, setSelectedProduct] = useState(null);
+    const [productToDelete, setProductToDelete] = useState(null);
+    const [showDetailsModal, setShowDetailsModal] = useState(false);
+    const [showDeleteModal, setShowDeleteModal] = useState(false);
+
+
+
+
+    useEffect(() => {
+        ListProduct();
+    }, [page, selectedAddress, searchTerm]);
+
+    const ListProduct = async () => {
+        try {
+            const data = await productService.listProduct();
+            setProducts(data.content);
+            setTotalPages(data.totalPages);
+        }catch (error){
+            console.error("Failed to fetch service:", error);
+        }
+    };
+
+    // Cập nhật trạng thái searchTerm mỗi khi người dùng thay đổi từ khóa tìm kiếm.
+    const handleSearchTermChange = (e) => {
+        setSearchTerm(e.target.value);
+    };
+    const paginate = (pageNumber) => {
+        setCurrentPage(pageNumber);
+    };
+
+    const handleDelete = () => {
+        // Logic xóa sản phẩm
+    };
+    const handleSelectAll = (e) => {
+        if (e.target.checked) {
+            setSelectedUids(products.map(products => products.uid));
+        } else {
+            setSelectedUids([]);
+        }
+    };
+
+    const handleAddProduct = (newProduct) => {
+        // Logic thêm sản phẩm
+    };
+    const handlePageChange = (newPage) => {
+        setCurrentPage(newPage);
+    };
+    const handleReset = () => {
+        console.log("..");
+        setSearchTerm('');  // Clear the search term
+        setSearchCategory('');  // Reset the selected search category
+        setCurrentPage(1);  // Reset the pagination to the first page
+        ListProduct();  // Fetch all products without any filters applied
+        setSelectedProduct(null);
+        setShowDetailsModal(false);
+        setShowDeleteModal(false);
+        setProductToDelete(null);
+        window.scrollTo(0, 0);
+    };
+
+
+
+    // Khi người dùng nhấn nút "Tìm kiếm", trang sẽ được reset về 0 và gọi lại hàm để lấy danh sách.
+    const handleSearch = () => {
+        setPage(0);  // Reset lại trang về 0.
+        ListProduct();  // Gọi lại hàm lấy danh sách nhà cung cấp.
+
+        function viewProductDetails({ show, handleClose, product }) {
+            return (
+                <Modal show={show} onHide={handleClose}>
+                    <Modal.Header closeButton className="bg-primary text-white">
+                        <Modal.Title>Chi tiết hàng hóa</Modal.Title>
+                    </Modal.Header>
+                    <Modal.Body>
+                        <p><strong>Tên:</strong> {product.name}</p>
+                        <p><strong>CPU:</strong> {product.cpu}</p>
+                        <p><strong>Lưu trữ:</strong> {product.storage}</p>
+                        <p><strong>Số lượng:</strong> {product.quantity}</p>
+                        <p><strong>Giá:</strong> {product.price}</p>
+                    </Modal.Body>
+                    <Modal.Footer>
+                        <Button variant="secondary" onClick={handleClose}>
+                            Đóng
+                        </Button>
+                    </Modal.Footer>
+                </Modal>
+            );
+        }
+
+
+        function confirmDelete(product){
+            Swal.fire({
+                title: "Warning!!!",
+                text:`Bạn có chắc chắn muốn xóa hàng hóa: ${product.name} ?`,
+                icon: "warning",
+                showCancelButton: true,
+                confirmButtonColor: "#3085d6",
+                cancelButtonColor: "#d33",
+                confirmButtonText: "Xóa!",
+                cancelButtonText: "Hủy!"
+            }).then(async (result) => {
+                if (result.isConfirmed) {
+                    handleDelete()
+                }
+            });
+        }
+        const fetchProducts = async (page) => {
+            try {
+                // Thay thế bằng API của bạn
+                const response = await fetch(`/api/products?page=${page}`);
+                const data = await response.json();
+                setProducts(data);
+            } catch (error) {
+                console.error('Lỗi khi lấy dữ liệu sản phẩm:', error);
+            }
+        };
+
+
+        return (
+            <div id="page-top" className="d-flex flex-column min-vh-100">
+                <div id="wrapper" className="flex-grow-1">
+                    <SideNav />
+                    { <Container className="my-5">
+                        <h2 className="text-center mb-4">Thông tin hàng hóa</h2>
+                        <div className="d-flex flex-wrap mb-4">
+                            <Button
+                                variant="primary"
+                                className="mr-3 mb-2"
+                                //onClick={() => setShowAddModal(true)}
+                            >
+                                Thêm mới hàng hóa
+                            </Button>
+                            {/* Custom Form for Searching */}
+                            {/*<form className="custom-form d-flex ml-auto mb-2" onSubmit={(e) => e.preventDefault()}>*/}
+                            {/*    <label htmlFor="search-category" className="custom-label mr-2">Tìm kiếm theo</label>*/}
+                            {/*    <select*/}
+                            {/*        id="search-category"*/}
+                            {/*        className="custom-select mr-2"*/}
+                            {/*        value={searchCategory}*/}
+                            {/*        //onChange={(e) => setSearchCategory(e.target.value)}*/}
+                            {/*    >*/}
+                            {/*        <option value="name">Tên hàng hóa</option>*/}
+                            {/*        <option value="cpu">CPU</option>*/}
+                            {/*        <option value="storage">Lưu trữ</option>*/}
+                            {/*        <option value="price">Giá</option>*/}
+                            {/*    </select>*/}
+
+                            {/*    <input*/}
+                            {/*        type="text"*/}
+                            {/*        className="custom-input mr-2"*/}
+                            {/*        placeholder="Tìm kiếm..."*/}
+                            {/*        value={searchTerm}*/}
+                            {/*        onChange={(e) => setSearchTerm(e.target.value)}*/}
+                            {/*    />*/}
+
+                            {/*    <button*/}
+                            {/*        type="button"*/}
+                            {/*        className="btn btn-primary"*/}
+                            {/*        onClick={handleSearch}*/}
+                            {/*    >*/}
+                            {/*        Tìm kiếm*/}
+                            {/*    </button>*/}
+
+                            {/*    <button*/}
+                            {/*        type="button"*/}
+                            {/*        className="btn btn-secondary ml-2"*/}
+                            {/*        onClick={handleReset}*/}
+                            {/*    >*/}
+                            {/*        Reset*/}
+                            {/*    </button>*/}
+                            {/*</form>*/}
+                        </div>
+
+                        <Table bordered hover responsive>
+                            <thead className="thead-light">
+                            <tr>
+                                <th>#</th>
+                                <th>Tên</th>
+                                <th>Giá</th>
+                                <th>CPU</th>
+                                <th>Lưu trữ</th>
+                                <th>Số lượng</th>
+                                <th>Hành động</th>
+                            </tr>
+                            </thead>
+                            <tbody>
+                            {currentProducts.length > 0 ? (
+                                currentProducts.map((product, index) => (
+                                    <tr key={product.id}>
+                                        <td>{indexOfFirstProduct + index + 1}</td>
+                                        <td>{product.name}</td>
+                                        <td>{product.price}</td>
+                                        <td>{product.cpu}</td>
+                                        <td>{product.storage}</td>
+                                        <td>{product.quantity}</td>
+                                        <td>
+                                            <div className="d-flex">
+                                                <i
+                                                    className="fas fa-book text-info mr-3"
+                                                    style={{ cursor: 'pointer' }}
+                                                   // onClick={() => viewProductDetails(product)}
+                                                    title="Xem chi tiết"
+                                                ></i>
+                                                <i
+                                                    className="fas fa-edit text-warning mr-3"
+                                                    style={{ cursor: 'pointer' }}
+                                                    title="Chỉnh sửa"
+                                                    // Implement edit functionality if needed
+                                                ></i>
+                                                <i
+                                                    className="fas fa-trash-alt text-danger"
+                                                    style={{ cursor: 'pointer' }}
+                                                   // onClick={() => confirmDelete(product)}
+                                                    title="Xóa"
+                                                ></i>
+                                            </div>
+                                        </td>
+                                    </tr>
+                                ))
+                            ) : (
+                                <tr>
+                                    <td colSpan="7" className="text-center">
+                                        Không có dữ liệu.
+                                    </td>
+                                </tr>
+                            )}
+                            </tbody>
+                        </Table>
+                        {/* Pagination */}
+                        {totalPages > 1 && (
+                            <Pagination className="justify-content-center">
+                                <Pagination.Prev
+                                   // onClick={() => paginate(currentPage - 1)}
+                                    disabled={currentPage === 1}
+                                >
+                                    Trang trước
+                                </Pagination.Prev>
+                                {[...Array(totalPages)].map((_, idx) => (
+                                    <Pagination.Item
+                                        key={idx + 1}
+                                        active={currentPage === idx + 1}
+                                        //onClick={() => paginate(idx + 1)}
+                                    >
+                                        {idx + 1}
+                                    </Pagination.Item>
+                                ))}
+                                <Pagination.Next
+                                    //onClick={() => paginate(currentPage + 1)}
+                                    disabled={currentPage === totalPages}
+                                >
+                                    Trang tiếp
+                                </Pagination.Next>
+                            </Pagination>
+                        )}
+
+                        {/* Toast Container */}
+                        <ToastContainer position="top-right" autoClose={3000} />
+
+                        {/* Product Details Modal */}
+                        {selectedProduct && (
+                            <getProductById
+                                show={showDetailsModal}
+                                handleClose={() => setShowDetailsModal(false)}
+                                product={selectedProduct}
+                            />
+                        )}
+
+                        {/* Delete Confirmation Modal */}
+                        {productToDelete && (
+                            <deleteProduct
+                                show={showDeleteModal}
+                                handleClose={() => setShowDeleteModal(false)}
+                                handleDelete={handleDelete}
+                                productName={productToDelete.name}
+                            />
+                        )}
+
+                        {/* Add Product Modal */}
+                        {/*<AddProductModal*/}
+                        show={showAddModal}
+                        handleClose={() => setShowAddModal(false)}
+                        handleAdd={handleAddProduct}
+                        />
+                    </Container>}
+                </div>
+                <Footer />
+            </div>
+        );
+
+    }
+}
+export default ProductDashboard3;
Index: src/ProductComponent/ProductDashboard2.js
===================================================================
diff --git a/src/ProductComponent/ProductDashboard2.js b/src/ProductComponent/ProductDashboard2.js
deleted file mode 100644
--- a/src/ProductComponent/ProductDashboard2.js	
+++ /dev/null	
@@ -1,385 +0,0 @@
-import Swal from "sweetalert2";
-import  {SideNav} from "../components/common/SideNav";
-import "bootstrap-icons/font/bootstrap-icons.css"; // Correctly import Bootstrap Icons CSS
-import "../components/assets/bootstrap/css/bootstrap.min.css";
-import Footer from "../components/common/Footer";
-import "../components/assets/css/animate.min.css";
-import "../components/assets/fonts/fontawesome-all.min.css";
-import {Modal, Button, Container, Table} from 'react-bootstrap';
-import * as productService from "./service/ProductService";
-import {ToastContainer} from "react-toastify";
-import { Pagination } from 'react-bootstrap';
-import {getProductById} from './service/ProductService'; // Adjust path as necessary
-import {deleteProduct} from './service/ProductService';
-import React, {useState, useEffect, Component} from 'react';
-
-
-function ProductDashboard2() {
-
-    // Khởi tạo currentPage với giá trị mặc định, ví dụ là 1
-    const [currentPage, setCurrentPage] = useState(1);
-    const [selectedAddress, setSelectedAddress] = useState("");
-    const [selectedUids, setSelectedUids] = useState([]);
-    const [searchTerm, setSearchTerm] = useState("");
-    const [page, setPage] = useState(0); // Thêm state cho trang hiện tại
-    const [totalPages, setTotalPages] = useState(0); // Thêm state cho tổng số trang
-    const productsPerPage = 10; // Giả sử mỗi trang hiển thị 10 sản phẩm
-    const indexOfLastProduct = currentPage * productsPerPage;
-    const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
-
-
-    const [products, setProducts] = useState([]); // Example product state
-    const [showAddModal, setShowAddModal] = useState(false);
-    const [searchCategory, setSearchCategory] = useState('');
-    const [currentProducts, setCurrentProducts] = useState([]);
-    const [selectedProduct, setSelectedProduct] = useState(null);
-    const [productToDelete, setProductToDelete] = useState(null);
-    const [showDetailsModal, setShowDetailsModal] = useState(false);
-    const [showDeleteModal, setShowDeleteModal] = useState(false);
-
-
-    useEffect(() => {
-        // Lấy sản phẩm dựa trên trang hiện tại
-        ListProduct(); // Call the function to fetch product data
-        document.title = `Danh sách`;
-        window.scrollTo(0, 0);
-        fetchProducts(currentPage);
-    }, [currentPage]);
-    const ListProduct = async () => {
-        try {
-            const data = await productService.listProduct();
-            setProducts(data.content);
-            setTotalPages(data.totalPages);
-        } catch (error) {
-            console.error("Failed to fetch service:", error);
-        }
-    };
-
-    // Cập nhật trạng thái searchTerm mỗi khi người dùng thay đổi từ khóa tìm kiếm.
-    const handleSearchTermChange = (e) => {
-        setSearchTerm(e.target.value);
-    };
-    const paginate = (pageNumber) => {
-        setCurrentPage(pageNumber);
-    };
-
-    const handleDelete = () => {
-        // Logic xóa sản phẩm
-    };
-    const handleSelectAll = (e) => {
-        if (e.target.checked) {
-            setSelectedUids(products.map(products => products.uid));
-        } else {
-            setSelectedUids([]);
-        }
-    };
-
-    const handleAddProduct = (newProduct) => {
-        // Logic thêm sản phẩm
-    };
-    const handlePageChange = (newPage) => {
-        setCurrentPage(newPage);
-    };
-    const handleReset = () => {
-        console.log("..");
-        setSearchTerm('');  // Clear the search term
-        setSearchCategory('');  // Reset the selected search category
-        setCurrentPage(1);  // Reset the pagination to the first page
-        ListProduct();  // Fetch all products without any filters applied
-        setSelectedProduct(null);
-        setShowDetailsModal(false);
-        setShowDeleteModal(false);
-        setProductToDelete(null);
-        window.scrollTo(0, 0);
-    };
-
-
-    // Khi người dùng nhấn nút "Tìm kiếm", trang sẽ được reset về 0 và gọi lại hàm để lấy danh sách.
-    const handleSearch = () => {
-        setPage(0);  // Reset lại trang về 0.
-        ListProduct();  // Gọi lại hàm lấy danh sách nhà cung cấp.
-
-        function viewProductDetails({show, handleClose, product}) {
-            return (
-                <Modal show={show} onHide={handleClose}>
-                    <Modal.Header closeButton className="bg-primary text-white">
-                        <Modal.Title>Chi tiết hàng hóa</Modal.Title>
-                    </Modal.Header>
-                    <Modal.Body>
-                        <p><strong>Tên:</strong> {product.name}</p>
-                        <p><strong>CPU:</strong> {product.cpu}</p>
-                        <p><strong>Lưu trữ:</strong> {product.storage}</p>
-                        <p><strong>Số lượng:</strong> {product.quantity}</p>
-                        <p><strong>Giá:</strong> {product.price}</p>
-                    </Modal.Body>
-                    <Modal.Footer>
-                        <Button variant="secondary" onClick={handleClose}>
-                            Đóng
-                        </Button>
-                    </Modal.Footer>
-                </Modal>
-            );
-        }
-
-
-        function confirmDelete(product) {
-            Swal.fire({
-                title: "Warning!!!",
-                text: `Bạn có chắc chắn muốn xóa hàng hóa: ${product.name} ?`,
-                icon: "warning",
-                showCancelButton: true,
-                confirmButtonColor: "#3085d6",
-                cancelButtonColor: "#d33",
-                confirmButtonText: "Xóa!",
-                cancelButtonText: "Hủy!"
-            }).then(async (result) => {
-                if (result.isConfirmed) {
-                    handleDelete()
-                }
-            });
-        }
-
-        const fetchProducts = async (page) => {
-            try {
-                // Thay thế bằng API của bạn
-                const response = await fetch(`/api/products?page=${page}`);
-                const data = await response.json();
-                setProducts(data);
-            } catch (error) {
-                console.error('Lỗi khi lấy dữ liệu sản phẩm:', error);
-            }
-        };
-
-
-        return (
-            <div id="page-top" className="d-flex flex-column min-vh-100">
-                <div id="wrapper" className="flex-grow-1">
-                    <SideNav/>
-                    {<Container className="my-5">
-                        <h2 className="text-center mb-4">Thông tin hàng hóa</h2>
-                        <div className="d-flex flex-wrap mb-4">
-                            <Button
-                                variant="primary"
-                                className="mr-3 mb-2"
-                                onClick={() => setShowAddModal(true)}
-                            >
-                                Thêm mới hàng hóa
-                            </Button>
-                            {/* Custom Form for Searching */}
-                            <form className="custom-form d-flex ml-auto mb-2" onSubmit={(e) => e.preventDefault()}>
-                                <label htmlFor="search-category" className="custom-label mr-2">Tìm kiếm theo</label>
-                                <select
-                                    id="search-category"
-                                    className="custom-select mr-2"
-                                    value={searchCategory}
-                                    //onChange={(e) => setSearchCategory(e.target.value)}
-                                >
-                                    <option value="name">Tên hàng hóa</option>
-                                    <option value="cpu">CPU</option>
-                                    <option value="storage">Lưu trữ</option>
-                                    <option value="price">Giá</option>
-                                </select>
-
-                                <input
-                                    type="text"
-                                    className="custom-input mr-2"
-                                    placeholder="Tìm kiếm..."
-                                    value={searchTerm}
-                                    onChange={(e) => setSearchTerm(e.target.value)}
-                                />
-
-                                <button
-                                    type="button"
-                                    className="btn btn-primary"
-                                    onClick={handleSearch}
-                                >
-                                    Tìm kiếm
-                                </button>
-
-                                <button
-                                    type="button"
-                                    className="btn btn-secondary ml-2"
-                                    onClick={handleReset}
-                                >
-                                    Reset
-                                </button>
-                            </form>
-                        </div>
-
-
-                        {/* Bảng danh sách hàng hóa */}
-                        <div className="table-responsive">
-                            <table className="table table-bordered">
-                                <thead className="table-light">
-                                <tr>
-                                    <th scope="col">#</th>
-                                    <th scope="col">Tên</th>
-                                    <th scope="col">Giá</th>
-                                    <th scope="col">CPU</th>
-                                    <th scope="col">Lưu trữ</th>
-                                    <th scope="col">Số lượng</th>
-                                    <th scope="col">Hành động</th>
-                                </tr>
-                                </thead>
-                                <tbody>
-                                {products && products.length > 0 ? (
-                                    products.map((product, index) => (
-                                        <tr key={product.id}>
-                                            <td>{indexOfFirstProduct + index + 1}</td>
-                                            <td>{product.name}</td>
-                                            <td>{product.price}</td>
-                                            <td>{product.cpu}</td>
-                                            <td>{product.storage}</td>
-                                            <td>{product.quantity}</td>
-                                            <td>
-                                                <div className="d-flex">
-                                                    <i
-                                                        className="fas fa-book text-info mr-3"
-                                                        style={{ cursor: 'pointer' }}
-                                                        onClick={() => viewProductDetails(product)}
-                                                        title="Xem chi tiết"
-                                                    ></i>
-                                                    <i
-                                                        className="fas fa-edit text-warning mr-3"
-                                                        style={{ cursor: 'pointer' }}
-                                                        title="Chỉnh sửa"
-                                                        // onClick={() => handleEditProduct(product)} // Implement edit functionality if needed
-                                                    ></i>
-                                                    <i
-                                                        className="fas fa-trash-alt text-danger"
-                                                        style={{ cursor: 'pointer' }}
-                                                        onClick={() => confirmDelete(product)}  
-                                                        title="Xóa"
-                                                    ></i>
-                                                </div>
-                                            </td>
-                                        </tr>
-                                    ))
-                                ) : (
-                                    <tr>
-                                        <td colSpan="8" className="text-center">Không có dữ liệu.</td>
-                                    </tr>
-                                )}
-                                </tbody>
-                            </table>
-                        </div>
-
-
-                        {/*<Table bordered hover responsive>*/}
-                        {/*    <thead className="thead-light">*/}
-                        {/*    <tr>*/}
-                        {/*        <th>#</th>*/}
-                        {/*        <th>Tên</th>*/}
-                        {/*        <th>Giá</th>*/}
-                        {/*        <th>CPU</th>*/}
-                        {/*        <th>Lưu trữ</th>*/}
-                        {/*        <th>Số lượng</th>*/}
-                        {/*        <th>Hành động</th>*/}
-                        {/*    </tr>*/}
-                        {/*    </thead>*/}
-                        {/*    <tbody>*/}
-                        {/*    {currentProducts.length > 0 ? (*/}
-                        {/*        currentProducts.map((product, index) => (*/}
-                        {/*            <tr key={product.id}>*/}
-                        {/*                <td>{indexOfFirstProduct + index + 1}</td>*/}
-                        {/*                <td>{product.name}</td>*/}
-                        {/*                <td>{product.price}</td>*/}
-                        {/*                <td>{product.cpu}</td>*/}
-                        {/*                <td>{product.storage}</td>*/}
-                        {/*                <td>{product.quantity}</td>*/}
-                        {/*                <td>*/}
-                        {/*                    <div className="d-flex">*/}
-                        {/*                        <i*/}
-                        {/*                            className="fas fa-book text-info mr-3"*/}
-                        {/*                            style={{cursor: 'pointer'}}*/}
-                        {/*                            onClick={() => viewProductDetails(product)}*/}
-                        {/*                            title="Xem chi tiết"*/}
-                        {/*                        ></i>*/}
-                        {/*                        <i*/}
-                        {/*                            className="fas fa-edit text-warning mr-3"*/}
-                        {/*                            style={{cursor: 'pointer'}}*/}
-                        {/*                            title="Chỉnh sửa"*/}
-                        {/*                            // Implement edit functionality if needed*/}
-                        {/*                        ></i>*/}
-                        {/*                        <i*/}
-                        {/*                            className="fas fa-trash-alt text-danger"*/}
-                        {/*                            style={{cursor: 'pointer'}}*/}
-                        {/*                            onClick={() => confirmDelete(product)}*/}
-                        {/*                            title="Xóa"*/}
-                        {/*                        ></i>*/}
-                        {/*                    </div>*/}
-                        {/*                </td>*/}
-                        {/*            </tr>*/}
-                        {/*        ))*/}
-                        {/*    ) : (*/}
-                        {/*        <tr>*/}
-                        {/*            <td colSpan="7" className="text-center">*/}
-                        {/*                Không có dữ liệu.*/}
-                        {/*            </td>*/}
-                        {/*        </tr>*/}
-                        {/*    )}*/}
-                        {/*    </tbody>*/}
-                        {/*</Table>*/}
-                        {/* Pagination */}
-                        {totalPages > 1 && (
-                            <Pagination className="justify-content-center">
-                                <Pagination.Prev
-                                    onClick={() => paginate(currentPage - 1)}
-                                    disabled={currentPage === 1}
-                                >
-                                    Trang trước
-                                </Pagination.Prev>
-                                {[...Array(totalPages)].map((_, idx) => (
-                                    <Pagination.Item
-                                        key={idx + 1}
-                                        active={currentPage === idx + 1}
-                                        onClick={() => paginate(idx + 1)}
-                                    >
-                                        {idx + 1}
-                                    </Pagination.Item>
-                                ))}
-                                <Pagination.Next
-                                    onClick={() => paginate(currentPage + 1)}
-                                    disabled={currentPage === totalPages}
-                                >
-                                    Trang tiếp
-                                </Pagination.Next>
-                            </Pagination>
-                        )}
-
-                        {/* Toast Container */}
-                        <ToastContainer position="top-right" autoClose={3000}/>
-
-                        {/* Product Details Modal */}
-                        {selectedProduct && (
-                            <getProductById
-                                show={showDetailsModal}
-                                handleClose={() => setShowDetailsModal(false)}
-                                product={selectedProduct}
-                            />
-                        )}
-
-                        {/* Delete Confirmation Modal */}
-                        {productToDelete && (
-                            <deleteProduct
-                                show={showDeleteModal}
-                                handleClose={() => setShowDeleteModal(false)}
-                                handleDelete={handleDelete}
-                                productName={productToDelete.name}
-                            />
-                        )}
-
-                        {/* Add Product Modal */}
-                        {/*<AddProductModal*/}
-                        show={showAddModal}
-                        handleClose={() => setShowAddModal(false)}
-                        handleAdd={handleAddProduct}
-                        />
-                    </Container>}
-                </div>
-                <Footer/>
-            </div>
-        );
-
-    }
-}export default ProductDashboard2;
\ No newline at end of file
